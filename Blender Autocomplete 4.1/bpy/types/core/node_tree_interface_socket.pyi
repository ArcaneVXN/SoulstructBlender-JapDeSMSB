import typing
import collections.abc
import mathutils
from .struct import Struct
from .bpy_struct import bpy_struct
from .node_socket import NodeSocket
from .node import Node
from .context import Context
from .ui_layout import UILayout
from .node_tree_interface_item import NodeTreeInterfaceItem

GenericType1 = typing.TypeVar("GenericType1")
GenericType2 = typing.TypeVar("GenericType2")


class NodeTreeInterfaceSocket(NodeTreeInterfaceItem, bpy_struct):
    """Declaration of a node socket"""

    attribute_domain: str
    """ Attribute domain used by the geometry nodes modifier to create an attribute output

    :type: str
    """

    bl_socket_idname: str
    """ Name of the socket type

    :type: str
    """

    default_attribute_name: str
    """ The attribute name used by default when the node group is used by a geometry nodes modifier

    :type: str
    """

    default_input: str
    """ Input to use when the socket is unconnected. Requires "Hide Value"

    :type: str
    """

    description: str
    """ Socket description

    :type: str
    """

    force_non_field: bool
    """ Only allow single value inputs rather than fields

    :type: bool
    """

    hide_in_modifier: bool
    """ Don't show the input value in the geometry nodes modifier interface

    :type: bool
    """

    hide_value: bool
    """ Hide the socket input value even when the socket is not connected

    :type: bool
    """

    identifier: str
    """ Unique identifier for mapping sockets

    :type: str
    """

    in_out: str
    """ Input or output socket type

    :type: str
    """

    layer_selection_field: bool
    """ Take Grease Pencil Layer or Layer Group as selection field

    :type: bool
    """

    name: str
    """ Socket name

    :type: str
    """

    socket_type: str
    """ Type of the socket generated by this interface item

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw properties of the socket interface

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...
