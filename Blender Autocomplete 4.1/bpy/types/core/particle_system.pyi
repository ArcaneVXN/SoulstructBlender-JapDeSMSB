import typing
import collections.abc
import mathutils
from .bpy_prop_collection import bpy_prop_collection
from .particle import Particle
from .particle_system_modifier import ParticleSystemModifier
from .struct import Struct
from .bpy_struct import bpy_struct
from .particle_settings import ParticleSettings
from .particle_target import ParticleTarget
from .object import Object
from .point_cache import PointCache
from .cloth_modifier import ClothModifier
from .child_particle import ChildParticle

GenericType1 = typing.TypeVar("GenericType1")
GenericType2 = typing.TypeVar("GenericType2")


class ParticleSystem(bpy_struct):
    """Particle system in an object"""

    active_particle_target: ParticleTarget
    """ 

    :type: ParticleTarget
    """

    active_particle_target_index: int | None
    """ 

    :type: int | None
    """

    child_particles: bpy_prop_collection[ChildParticle]
    """ Child particles generated by the particle system

    :type: bpy_prop_collection[ChildParticle]
    """

    child_seed: int
    """ Offset in the random number table for child particles, to get a different randomized result

    :type: int
    """

    cloth: ClothModifier
    """ Cloth dynamics for hair

    :type: ClothModifier
    """

    dt_frac: float
    """ The current simulation time step size, as a fraction of a frame

    :type: float
    """

    has_multiple_caches: bool
    """ Particle system has multiple point caches

    :type: bool
    """

    invert_vertex_group_clump: bool
    """ Negate the effect of the clump vertex group

    :type: bool
    """

    invert_vertex_group_density: bool
    """ Negate the effect of the density vertex group

    :type: bool
    """

    invert_vertex_group_field: bool
    """ Negate the effect of the field vertex group

    :type: bool
    """

    invert_vertex_group_kink: bool
    """ Negate the effect of the kink vertex group

    :type: bool
    """

    invert_vertex_group_length: bool
    """ Negate the effect of the length vertex group

    :type: bool
    """

    invert_vertex_group_rotation: bool
    """ Negate the effect of the rotation vertex group

    :type: bool
    """

    invert_vertex_group_roughness_1: bool
    """ Negate the effect of the roughness 1 vertex group

    :type: bool
    """

    invert_vertex_group_roughness_2: bool
    """ Negate the effect of the roughness 2 vertex group

    :type: bool
    """

    invert_vertex_group_roughness_end: bool
    """ Negate the effect of the roughness end vertex group

    :type: bool
    """

    invert_vertex_group_size: bool
    """ Negate the effect of the size vertex group

    :type: bool
    """

    invert_vertex_group_tangent: bool
    """ Negate the effect of the tangent vertex group

    :type: bool
    """

    invert_vertex_group_twist: bool
    """ Negate the effect of the twist vertex group

    :type: bool
    """

    invert_vertex_group_velocity: bool
    """ Negate the effect of the velocity vertex group

    :type: bool
    """

    is_editable: bool
    """ Particle system can be edited in particle mode

    :type: bool
    """

    is_edited: bool
    """ Particle system has been edited in particle mode

    :type: bool
    """

    is_global_hair: bool
    """ Hair keys are in global coordinate space

    :type: bool
    """

    name: str
    """ Particle system name

    :type: str
    """

    parent: Object
    """ Use this object's coordinate system instead of global coordinate system

    :type: Object
    """

    particles: bpy_prop_collection[Particle]
    """ Particles generated by the particle system

    :type: bpy_prop_collection[Particle]
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    reactor_target_object: Object
    """ For reactor systems, the object that has the target particle system (empty if same object)

    :type: Object
    """

    reactor_target_particle_system: int
    """ For reactor systems, index of particle system on the target object

    :type: int
    """

    seed: int
    """ Offset in the random number table, to get a different randomized result

    :type: int
    """

    settings: ParticleSettings
    """ Particle system settings

    :type: ParticleSettings
    """

    targets: bpy_prop_collection[ParticleTarget]
    """ Target particle systems

    :type: bpy_prop_collection[ParticleTarget]
    """

    use_hair_dynamics: bool
    """ Enable hair dynamics using cloth simulation

    :type: bool
    """

    use_keyed_timing: bool
    """ Use key times

    :type: bool
    """

    vertex_group_clump: str
    """ Vertex group to control clump

    :type: str
    """

    vertex_group_density: str
    """ Vertex group to control density

    :type: str
    """

    vertex_group_field: str
    """ Vertex group to control field

    :type: str
    """

    vertex_group_kink: str
    """ Vertex group to control kink

    :type: str
    """

    vertex_group_length: str
    """ Vertex group to control length

    :type: str
    """

    vertex_group_rotation: str
    """ Vertex group to control rotation

    :type: str
    """

    vertex_group_roughness_1: str
    """ Vertex group to control roughness 1

    :type: str
    """

    vertex_group_roughness_2: str
    """ Vertex group to control roughness 2

    :type: str
    """

    vertex_group_roughness_end: str
    """ Vertex group to control roughness end

    :type: str
    """

    vertex_group_size: str
    """ Vertex group to control size

    :type: str
    """

    vertex_group_tangent: str
    """ Vertex group to control tangent

    :type: str
    """

    vertex_group_twist: str
    """ Vertex group to control twist

    :type: str
    """

    vertex_group_velocity: str
    """ Vertex group to control velocity

    :type: str
    """

    def co_hair(
        self,
        object: Object,
        particle_no: typing.Any | None = 0,
        step: typing.Any | None = 0,
    ) -> mathutils.Vector:
        """Obtain cache hair data

        :param object: Object
        :type object: Object
        :param particle_no: Particle no
        :type particle_no: typing.Any | None
        :param step: step no
        :type step: typing.Any | None
        :return: Co, Exported hairkey location
        :rtype: mathutils.Vector
        """
        ...

    def uv_on_emitter(
        self,
        modifier: ParticleSystemModifier,
        particle: Particle,
        particle_no: typing.Any | None = 0,
        uv_no: typing.Any | None = 0,
    ) -> mathutils.Vector:
        """Obtain uv for all particles

        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: Particle
        :type particle: Particle
        :param particle_no: Particle no
        :type particle_no: typing.Any | None
        :param uv_no: UV no
        :type uv_no: typing.Any | None
        :return: uv
        :rtype: mathutils.Vector
        """
        ...

    def mcol_on_emitter(
        self,
        modifier: ParticleSystemModifier,
        particle: Particle,
        particle_no: typing.Any | None = 0,
        vcol_no: typing.Any | None = 0,
    ) -> mathutils.Color:
        """Obtain mcol for all particles

        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: Particle
        :type particle: Particle
        :param particle_no: Particle no
        :type particle_no: typing.Any | None
        :param vcol_no: vcol no
        :type vcol_no: typing.Any | None
        :return: mcol
        :rtype: mathutils.Color
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...
